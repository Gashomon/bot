# Localization YAMLs
amcl:
  ros__parameters:
    use_sim_time: False
    # trust scores on..
    alpha1: 0.2 # rotation pose by rotating
    alpha2: 0.2 # rotation pose by forward/backward
    alpha3: 0.5 # position by forward/backward 
    alpha4: 0.5 # position by rotating
    alpha5: 0.2 # omni model shit
    base_frame_id: "base_link" # default footprint
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1 # tolerance to shorter objects
    laser_likelihood_max_dist: 5.0 #obstacle detection range
    laser_max_range: 10.0 # max distance to consider to map
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 50 # number of beams to use. default 60
    max_particles: 1800 # number of max particles for localization. default 2000
    min_particles: 450 # number of min particles for localization. default 500
    odom_frame_id: "odom"
    pf_err: 0.05 # filter removal due to errors. default 0.05
    pf_z: 0.9 # filter to hold particles. default 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1 # update rate every movement.
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.25 # Hz for updating for pose parameter server
    sigma_hit: 0.2 # checker to match sensor readings. Higher = more tolerant
    tf_broadcast: True 
    transform_tolerance: 0.5 # duration for the transforms to be valid
    update_min_a: 0.1 # update rate in radians for rotating. default 0.25
    update_min_d: 0.1 # update rate in meters for moving. default 0.25
    z_hit: 0.5 # trust that sensor readings are perfect to map. default  0.5
    z_max: 0.1 # trust that max sensor reads are correct. default 0.05
    z_rand: 1.0 # trust on sensor readings that deosn't make sense on map
    z_short: 0.5 # trust on sensor default 0.05
    scan_topic: /ldlidar_node/scan
    # added initial pose
    set_initial_pose: true
    initial_pose: 
      x: 0.0
      y: 0.0
      z: 0.0
      yaw: 0.0

# Navigator YAMLs
bt_navigator: # Main Navigator. Compiles everything else. Lists all major navigation functions/features
  ros__parameters:
    use_sim_time: False
    # bond_heartbeat_period:  1.0  # 0.1 default
    global_frame: map
    robot_base_frame: base_link
    # odom_topic: "/diff_cont/odom"
    odom_topic: "/ekf/odom"
    bt_loop_duration: 100 # ms for bt to think . default 10
    filter_duration: 0.3 # smoothed vel time
    default_server_timeout: 100 # ms to wait for a server response. default 20. overwritten if specified in server
    wait_for_service_timeout: 1000 # ms to wait for a service response. default 1000. overwritten if specified in service
    action_server_result_timeout: 900 # seconds to wait for action server to finish. default 900. overwritten if specified in server
    transform tolerance: 0.1 # how long until transforms are invalid. default 0.1
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    default_nav_to_pose_bt_xml: "bot/src/bot/implement_bot/import/behavior_trees/navigate_to_pose_w_replanning_goal_patience_and_recovery.xml"
    default_nav_through_poses_bt_xml: "bot/src/bot/implement_bot/import/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml"
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
      use_sim_time: False
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
      use_sim_time: False
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node
    error_code_name_prefixes:
      - assisted_teleop
      - backup
      - compute_path
      - dock_robot
      - drive_on_heading
      - follow_path
      - nav_thru_poses
      - nav_to_pose
      - spin
      - route
      - undock_robot
      - wait

controller_server: # Current Progress Checker / Path Follower / Costmap Publisher
  ros__parameters:
    use_sim_time: False
    odom_topic: "/ekf/odom"
    controller_frequency: 2.0 # speed of controller
    # costmap_update_timeout: 0.5 # waiting time for costmaps. default 0.3. notdoc
    min_x_velocity_threshold: 0.0001       #if less than this value, read as zero 
    min_y_velocity_threshold: 0.5       #if less than this value, read as zero 
    min_theta_velocity_threshold: 0.0001   #if less than this value, read as zero 
    failure_tolerance: 0.0      # give up param (seconds). positive: timeout, zero: disabled, -1: infinite
    publish_zero_velocity: true
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["simple_goal_checker"]
    controller_plugins: ["FollowPath"]
    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.25 # need to atleast move in meters. default 0.5
      movement_time_allowance: 5.0 # time to take most to move in seconds. default 10.0
    # Goal checker parameters
    simple_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      stateful: True
      xy_goal_tolerance: 0.1 # error in meters on the actual goal
      yaw_goal_tolerance: 1.0 # error in radians on the actual goal
    # # pure pursuit
    # FollowPath:  
    #   plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
    #   desired_linear_vel: 0.05
    #   lookahead_dist: 1.0
    #   min_lookahead_dist: 0.3
    #   max_lookahead_dist: 0.9
    #   lookahead_time: 1.0
    #   rotate_to_heading_angular_vel: 1.0
    #   transform_tolerance: 0.5
    #   use_velocity_scaled_lookahead_dist: true
    #   min_approach_linear_velocity: 0.15
    #   approach_velocity_scaling_dist: 0.6
    #   use_collision_detection: true
    #   max_allowed_time_to_collision_up_to_carrot: 1.0
    #   use_regulated_linear_velocity_scaling: true
    #   use_fixed_curvature_lookahead: false
    #   curvature_lookahead_dist: 0.5
    #   use_cost_regulated_linear_velocity_scaling: true
    #   regulated_linear_scaling_min_radius: 1.0
    #   regulated_linear_scaling_min_speed: 0.15
    #   use_rotate_to_heading: true
    #   allow_reversing: false
    #   rotate_to_heading_min_angle: 0.785
    #   max_angular_accel: 3.2
    #   max_robot_pose_search_dist: 5.0
    #   use_cancel_deceleration: true # default false
    #   cancel_deceleration: 3.2 

    # Rotate Shim Controller
    FollowPath:  
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      # primary_controller: "reg_pure_pursuit"
      primary_controller: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      angular_dist_threshold: 0.785 # radians
      forward_sampling_distance: 0.5 # meters
      angular_disengage_threshold: 0.3925 # rad/s
      rotate_to_heading_angular_vel: 2.0
      max_angular_accel: 3.0
      simulate_ahead_time: 1.0
      rotate_to_goal_heading: false
      closed_loop: true # default true

      primary_controller.desired_linear_vel: 0.35
      primary_controller.lookahead_dist: 1.0
      primary_controller.min_lookahead_dist: 0.3
      primary_controller.max_lookahead_dist: 0.9
      primary_controller.lookahead_time: 1.0
      primary_controller.rotate_to_heading_angular_vel: 1.0S
      primary_controller.transform_tolerance: 0.5
      primary_controller.use_velocity_scaled_lookahead_dist: true
      primary_controller.min_approach_linear_velocity: 0.05
      primary_controller.approach_velocity_scaling_dist: 0.6
      primary_controller.use_collision_detection: true
      primary_controller.max_allowed_time_to_collision_up_to_carrot: 1.8
      primary_controller.use_regulated_linear_velocity_scaling: true
      primary_controller.use_fixed_curvature_lookahead: false
      primary_controller.curvature_lookahead_dist: 0.25
      primary_controller.use_cost_regulated_linear_velocity_scaling: true
      primary_controller.regulated_linear_scaling_min_radius: 1.0
      primary_controller.regulated_linear_scaling_min_speed: 0.3
      primary_controller.use_rotate_to_heading: true
      primary_controller.allow_reversing: false
      primary_controller.rotate_to_heading_min_angle: 0.785
      primary_controller.max_angular_accel: 3.2
      primary_controller.max_robot_pose_search_dist: 5.0
      primary_controller.use_cancel_deceleration: true # default false
      primary_controller.cancel_deceleration: 3.2 

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      use_sim_time: False
      resolution: 0.1
      robot_radius: 0.3233
      width: 5
      height: 5
      # origin_x: -1.97
      # origin_y: -4.24
      map_vis_z: 0.0
      # plugins: ["obstacle_layer","range_layer", "inflation_layer", ]
      plugins: ["obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        max_obstacle_height: 5.0 #original 2.0
        scan:
          topic: /ldlidar_node/scan
          max_obstacle_height: 5.0 #original 2.0
          # expected_update_rate: 100.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
      range_layer:
        plugin: "nav2_costmap_2d::RangeSensorLayer"
        topics: ["/left_range_broad/range","/right_range_broad/range"]
        phi: 1.2
        clear_threshold: 0.8
        clear_on_max_reading: False
        mark_thresold:  0.2
        input_sensor_type: 'ALL'
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 7.0
        inflation_radius: 0.5
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 2.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.18
      width: 20
      height: 20
      resolution: 0.25
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "keepout_filter", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        max_obstacle_height: 5.0 #original 2.0
        scan:
          topic: /ldlidar_node/scan
          max_obstacle_height: 5.0 #original 2.0
          # expected_update_rate: 100.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 10.0
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 7.0
        inflation_radius: 0.5
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: True
        filter_info_topic: "/map_filter"
        mask_topic: "/mask_server"
        transform_tolerance: 0.1
      always_send_full_costmap: True

map_server: # loads the map
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    # yaml_filename: "src/bot/implement_bot/maps/modded_actual.yaml"
    yaml_filename: "src/bot/implement_bot/maps/fixed_map.yaml"
    topic_name: "map"
    frame_id: "map"

mask_server: # loads the map
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    # yaml_filename: "src/bot/implement_bot/maps/modded_actual.yaml"
    yaml_filename: "src/bot/implement_bot/maps/fixed_map.yaml"
    topic_name: "/map_mask"
    frame_id: "map"
    
keepout_filter:
  ros__parameters:
    use_sim_true: False
    type: 0
    filter_info_topic: "/map_filter"
    mask_topic: "/map_mask"
    base: 0.0
    multiplier: 1.0

map_saver: # stores a map
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0 
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    # map_subscribe_transient_local: True

planner_server: # Uses map and generates Path
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: True
      allow_unknown: True
      use_final_approach_orientation: false # decide if last path ends with desired pose

smoother_server: # Path smoother only
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True
      w_data: 0.2
      w_smooth: 0.3

behavior_server: # lists all basic drive functions
  ros__parameters:
    use_sim_time: false     #somehow not used
    robot_base_frame: base_link
    transform_tolerance: 0.1    
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    
    spin:
      plugin: "nav2_behaviors/Spin"

    backup:
      plugin: "nav2_behaviors/BackUp"
      acceleration_limit: 0.35
      deceleration_limit: -0.35
      minimum_speed: 0.35

    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
      acceleration_limit: 0.15
      deceleration_limit: -0.15
      minimum_speed: 0.25

    wait:
      plugin: "nav2_behaviors/Wait"

    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    
    simulate_ahead_time: 0.8  # Time to look ahead of collision (s) (spin, backup, driveon)
    projection_time: 0.8      # Time to look ahead of collision (s) (assistedteleop, backup, driveon)
    simulation_time_step: 1.0 # Time step for projections (s) (assistedteleop)
    # cmd_vel_teleop:           # Topic to listen for teleopmessages (assistedteleop)

    max_rotational_vel: 2.0
    min_rotational_vel: 1.2
    rotational_acc_lim: 2.0

waypoint_follower: # waypoint special configurations
  ros__parameters:
    use_sim_time: False
    loop_rate: 1
    stop_on_failure: True
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 2000

velocity_smoother:  #additional velocity control
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 10.0
    scale_velocities: False
    # feedback: "CLOSED_LOOP" # should be close
    feedback: "OPEN_LOOP"
    max_velocity:  [0.5, 0.0, 2.5]
    min_velocity: [-0.5, 0.0, -2.5]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "/ekf/odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 5.0

collision_monitor:
  ros__parameters:
    base_frame_id: "base_link"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_nvs"
    cmd_vel_out_topic: "cmd_vel_nav"
    # state_topic: "collision_monitor_state"
    transform_tolerance: 0.5
    source_timeout: 5.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    enable_stamped_cmd_vel: True  # False for Jazzy or older
    use_realtime_priority: false
    polygons: ["PolygonStop", "PolygonApproach"]
    PolygonStop:
      type: "polygon"
      points: [0.4,0.4,0.4,-0.4,-0.4,-0.4,-0.4,0.4]
      action_type: "stop"
      min_points: 4  # max_points: 3 for Humble
      visualize: True
      polygon_pub_topic: "polygon_stop"
    PolygonApproach:
      type: "polygon"
      points: [0.8,0.8,0.8,-0.8,-0.8,-0.8,-0.8,0.8]
      action_type: "approach"
      min_points: 4  # max_points: 3 for Humble
      time_before_collision: 0.8
      simulation_time_step: 1.0
      visualize: True
      polygon_pub_topic: "polygon_approach"
    observation_sources: ["scan"]
    scan:
      source_timeout: 0.2
      type: "scan"
      topic: "/ldlidar_node/scan"
      enabled: True

robot_state_publisher:
  ros__parameters:
    use_sim_time: False