<?xml version="1.0"?>
<!-- ROBOT CORE COMPONENTS-->
 <!-- ACTUAL -->
 
<!-- call xacro-->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    
    <!-- Properties xacro-->
    <xacro:include filename="base_properties.xacro"/>

    <!-- World link-joints -->
    <link name="base_link">
    </link>

    <link name="base_footprint">
    </link>
    
    <joint name="base_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0 0 -0.01" rpy="0 0 0"/>
    </joint>

    <!-- <link name="odom">
    </link>
    <joint name="base_odom" type="fixed">
        <parent link="base_link"/>
        <child link="odom"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint> -->

    <!-- Body link-joints -->
    <link name="chassis_link">
        <visual>
            <geometry>
                <mesh filename="package://implement_bot/description/meshes/model-chassis_part.dae" scale="${scale}"/>
            </geometry>
            <xacro:scaled_origin x="0.0" y="0.0" z="0.0"/>
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://implement_bot/description/meshes/model-chassis_part.dae" scale="${scale}"/>
            </geometry>
            <xacro:scaled_origin x="0.0" y="0.0" z="0.0"/>
        </collision>
        <xacro:inertial_box mass="${chassis_mass}" x="${actual_bot_width}" y="${actual_bot_length}" z="${actual_chassis_height}">
            <xacro:scaled_origin_rpy x="0" y="0"  z="0" roll="0" pitch="0" yaw="0"/>
        </xacro:inertial_box>
    </link>

    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis_link"/>
        <xacro:scaled_origin x="${bot_pos_x}" y="${bot_pos_y}" z="${bot_pos_z}"/>
    </joint>

    <!-- Wheel link-joints -->
    <xacro:macro name="wheel_link" params="pos_x pos_y">
        <link name="${pos_x}_${pos_y}_wheel_link">
            <visual>
                <geometry>
                    <mesh filename="package://implement_bot/description/meshes/model-wheel_part_curve.dae" scale="${scale}"/>
                </geometry>
                <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="${-actual_wheel_radius/2 + actual_shaft_thickness*2/3}" roll="0" pitch="0" yaw="0"/>
            </visual>
            <collision>
                <geometry>
                    <mesh filename="package://implement_bot/description/meshes/model-wheel_part_curve.dae" scale="${scale}"/>
                </geometry>
                <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="${-actual_wheel_radius/2 + actual_shaft_thickness*2/3}" roll="0" pitch="0" yaw="0"/>
            </collision>
            <xacro:inertial_cylinder mass="${wheel_mass}" length="${actual_wheel_thickness}" radius="${actual_wheel_radius}">
                <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="${-actual_wheel_radius/2 + actual_shaft_thickness*2/3}" roll="0" pitch="0" yaw="0"/>
            </xacro:inertial_cylinder>
        </link> 
    </xacro:macro>
    
    <xacro:wheel_link pos_x="left" pos_y="back"/>
    <xacro:wheel_link pos_x="right" pos_y="back"/>
    <xacro:wheel_link pos_x="left" pos_y="front"/>
    <xacro:wheel_link pos_x="right" pos_y="front"/>

    <xacro:macro name="wheel_joint" params="pos_x pos_y axis">
        <xacro:if value="${pos_x == 'left'}">
            <xacro:property name="wheel_x" value="${-(actual_bot_width/2) - actual_wheel_radius}"/>
            <xacro:property name="wheel_turn" value="${pi}"/>
        </xacro:if>
        <xacro:if value="${pos_x == 'right'}">
            <xacro:property name="wheel_x" value="${(actual_bot_width/2) + actual_wheel_radius}"/>
            <xacro:property name="wheel_turn" value="0"/>
        </xacro:if>
        <xacro:if value="${pos_y == 'back'}">
            <xacro:property name="wheel_y" value="${-(actual_bot_length/2 - actual_wheel_radius)}"/>
        </xacro:if>
        <xacro:if value="${pos_y == 'front'}">
            <xacro:property name="wheel_y" value="${(actual_bot_length/2 - actual_wheel_radius)}"/>
        </xacro:if>
        <joint name="${pos_x}_${pos_y}_wheel_joint" type="continuous">
            <parent link="chassis_link"/>
            <child link="${pos_x}_${pos_y}_wheel_link"/>
            <xacro:scaled_origin_rpy x="${wheel_x}" y="${wheel_y}"  z="${actual_wheel_radius/2}" roll="0" pitch="${wheel_turn}" yaw="0"/>
            <axis xyz="${axis} 0 0"/>
        </joint>
        <gazebo reference="${pos_x}_${pos_y}_wheel_link">
            <material>Gazebo/Blue</material>
            <mu1 value="1.0"/>
            <mu2 value="0.125"/>
         </gazebo>
    </xacro:macro>
    
    <xacro:wheel_joint pos_x="left" pos_y="back" axis="1"/>
    <xacro:wheel_joint pos_x="right" pos_y="back" axis="-1"/>
    <xacro:wheel_joint pos_x="left" pos_y="front" axis="1"/>
    <xacro:wheel_joint pos_x="right" pos_y="front" axis="-1"/>

</robot>