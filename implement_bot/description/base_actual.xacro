<?xml version="1.0"?>
<!-- ROBOT CORE COMPONENTS-->
 <!-- ACTUAL -->
 
<!-- call xacro-->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    
    <!-- Properties xacro-->
    <xacro:include filename="base_properties.xacro"/>

    <!-- World link-joints -->
    <link name="base_link">
    </link>

    <link name="base_footprint">
    </link>
    
    <joint name="base_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0 0 -0.001" rpy="0 0 0"/> 
    </joint>
    
    <!-- Final Odom used by EFK Node-->
    <link name="odom">
    </link>

    <joint name="odom_base" type="fixed">
        <parent link="odom"/>
        <child link="base_link"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <link name="map">
    </link>

    <joint name="map_odom" type="fixed">
        <parent link="map"/>
        <child link="odom"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <!-- Body link-joints -->
    <link name="chassis_link">
        <visual>
            <geometry>
                <mesh filename="package://implement_bot/description/meshes/model-chassis_part.dae" scale="${scale}"/>
            </geometry>
            <xacro:scaled_origin x="0.0" y="0.0" z="0.0"/>
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://implement_bot/description/meshes/model-chassis_part.dae" scale="${scale}"/>
            </geometry>
            <xacro:scaled_origin x="0.0" y="0.0" z="0.0"/>
        </collision>
        <xacro:inertial_box mass="${chassis_mass}" x="${actual_bot_width}" y="${actual_bot_length}" z="${actual_chassis_height}">
            <xacro:scaled_origin_rpy x="0" y="0"  z="0" roll="0" pitch="0" yaw="0"/>
        </xacro:inertial_box>
    </link>

    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis_link"/>
        <xacro:scaled_origin x="${bot_pos_x}" y="${bot_pos_y}" z="${bot_pos_z}"/>
    </joint>

    <link name="load_link">
        <visual>
            <geometry>
                <mesh filename="package://implement_bot/description/meshes/model-load_part.dae" scale="${scale}"/>
            </geometry>
            <xacro:scaled_origin x="0.0" y="0.0" z="0.0"/>
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://implement_bot/description/meshes/model-load_part.dae" scale="${scale}"/>
            </geometry>
            <xacro:scaled_origin x="0.0" y="0.0" z="0.0"/>
        </collision>
        <xacro:inertial_box mass="${storage_mass}" x="${actual_bot_width}" y="${actual_bot_length}" z="${actual_storage_height}">
            <xacro:scaled_origin_rpy x="0" y="0"  z="0" roll="0" pitch="0" yaw="0"/>
        </xacro:inertial_box>
    </link>

    <joint name="load_joint" type="fixed">
        <parent link="base_link"/>
        <child link="load_link"/>
        <xacro:scaled_origin x="${bot_pos_x}" y="${bot_pos_y}" z="${bot_pos_z}"/>
    </joint>

    <link name="top_link">
        <visual>
            <geometry>
                <mesh filename="package://implement_bot/description/meshes/model-top_part.dae" scale="${scale}"/>
            </geometry>
            <xacro:scaled_origin x="0.0" y="0.0" z="0.0"/>
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://implement_bot/description/meshes/model-top_part.dae" scale="${scale}"/>
            </geometry>
            <xacro:scaled_origin x="0.0" y="0.0" z="0.0"/>
        </collision>
        <xacro:inertial_box mass="${top_mass}" x="${actual_bot_width}" y="${actual_bot_length}" z="${actual_top_height}">
            <xacro:scaled_origin_rpy x="0" y="0"  z="0" roll="0" pitch="0" yaw="0"/>
        </xacro:inertial_box>
    </link>

    <joint name="top_joint" type="fixed">
        <parent link="base_link"/>
        <child link="top_link"/>
        <xacro:scaled_origin x="${bot_pos_x}" y="${bot_pos_y}" z="${bot_pos_z}"/>
    </joint>
    
    <!-- Caster link-joints -->
    <xacro:macro name="caster_link_joint" params="pos_x axis">
        <link name="${pos_x}_caster_link">
            <visual>
                <geometry> 
                    <sphere radius="${actual_wheel_radius/2}"/>
                </geometry>
                <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="0.0" roll="0" pitch="0" yaw="0"/>
            </visual>
            <collision>
                <geometry> 
                    <sphere radius="${actual_wheel_radius/2}"/>
                </geometry>
                <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="0.0" roll="0" pitch="0" yaw="0"/>
            </collision>
            <xacro:inertial_sphere mass="${wheel_mass}" radius="${actual_wheel_radius}">
                <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="0.0" roll="0" pitch="0" yaw="0"/>
            </xacro:inertial_sphere>
        </link> 

        <xacro:if value="${pos_x == 'left'}">
            <xacro:property name="wheel_x" value="${+(actual_bot_width/3)}"/>
            <xacro:property name="wheel_turn_x" value="0"/>
        </xacro:if>
        <xacro:if value="${pos_x == 'right'}">
            <xacro:property name="wheel_x" value="${-(actual_bot_width/3)}"/>          
            <xacro:property name="wheel_turn_x" value="${pi}"/>
        </xacro:if>
        <xacro:property name="wheel_turn_y" value="${pi/2}"/>

        <joint name="${pos_x}_caster_joint" type="fixed">
            <parent link="base_link"/>
            <child link="${pos_x}_caster_link"/>
            <xacro:scaled_origin_rpy x="${-(actual_bot_length/2 - actual_wheel_radius*2)}" y="${wheel_x}"  z="${bot_pos_z}" roll="0" pitch="${wheel_turn_x}" yaw="${wheel_turn_y}"/>
            <axis xyz="${axis} 0 0"/>
        </joint>

        <gazebo reference="${pos_x}_caster_link">
            <material>Gazebo/Blue</material>
            <mu1 value="0.01"/>
            <mu2 value="0.01"/>
         </gazebo>
    </xacro:macro>

    <xacro:caster_link_joint pos_x="left" axis="1"/>
    <xacro:caster_link_joint pos_x="right" axis="-1"/>

    <!-- Wheel link-joints -->
    <xacro:macro name="wheel_link" params="pos_x pos_y">
        <link name="${pos_x}_${pos_y}_wheel_link">
            <visual>
                <geometry>
                    <mesh filename="package://implement_bot/description/meshes/model-wheel_part_curve.dae" scale="${scale}"/>
                    <cylinder radius="${actual_wheel_radius}" length="${actual_wheel_thickness}"/>
                </geometry>
                <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="${-actual_wheel_radius/2 + actual_shaft_thickness*2/3}" roll="0" pitch="0" yaw="0"/>
            </visual>
            <collision>
                <geometry>
                    <!-- <mesh filename="package://implement_bot/description/meshes/model-wheel_part_simple.dae" scale="${scale}"/> -->
                    <cylinder radius="${actual_wheel_radius}" length="${actual_wheel_thickness}"/>
                </geometry>
                <origin xyz="0 0 0" rpy="0 ${pi/2} 0 "/>
                <!-- <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="${-actual_wheel_radius/2 + actual_shaft_thickness*2/3}" roll="0" pitch="0" yaw="0"/> -->
            </collision>
            <xacro:inertial_cylinder mass="${wheel_mass}" length="${actual_wheel_thickness}" radius="${actual_wheel_radius}">
                <origin xyz="0 0 0" rpy="0 ${pi/2} 0 "/>
                <!-- <xacro:scaled_origin_rpy x="${-actual_shaft_length*2 -(actual_wheel_thickness/2)}" y="${actual_wheel_radius + actual_shaft_thickness}"  z="${-actual_wheel_radius/2 + actual_shaft_thickness*2/3}" roll="0" pitch="0" yaw="0"/> -->
            </xacro:inertial_cylinder>
        </link> 
    </xacro:macro>

    <xacro:wheel_link pos_x="left" pos_y="front"/>
    <xacro:wheel_link pos_x="right" pos_y="front"/>

    <xacro:macro name="wheel_joint" params="pos_x pos_y axis">
        <xacro:if value="${pos_x == 'left'}">
            <xacro:property name="wheel_y" value="${+(actual_bot_width/2) + actual_wheel_radius}"/>
            <xacro:property name="wheel_turn_x" value="0"/>
        </xacro:if>
        <xacro:if value="${pos_x == 'right'}">
            <xacro:property name="wheel_y" value="${-(actual_bot_width/2) - actual_wheel_radius}"/>          
            <xacro:property name="wheel_turn_x" value="${pi}"/>
        </xacro:if>
        <xacro:if value="${pos_y == 'back'}">
            <xacro:property name="wheel_x" value="${-(actual_bot_length/2 - actual_wheel_radius)}"/>
            <xacro:property name="wheel_turn_y" value="${pi/2}"/>
        </xacro:if>
        <xacro:if value="${pos_y == 'front'}">
            <xacro:property name="wheel_x" value="${(actual_bot_length/2 - actual_wheel_radius)}"/>
            <xacro:property name="wheel_turn_y" value="${pi/2}"/>
        </xacro:if>
        <joint name="${pos_x}_${pos_y}_wheel_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${pos_x}_${pos_y}_wheel_link"/>
            <xacro:scaled_origin_rpy x="${wheel_x}" y="${wheel_y}"  z="${bot_pos_z + (actual_wheel_radius/2)}" roll="0" pitch="${wheel_turn_x}" yaw="${wheel_turn_y}"/>
            <axis xyz="${axis} 0 0"/>
            <mimic joint="${pos_x}_motor_joint"/>
        </joint>
        <gazebo reference="${pos_x}_${pos_y}_wheel_link">
            <material>Gazebo/Blue</material>
            <mu1 value="0.250"/>
            <mu2 value="0.125"/>
         </gazebo>
    </xacro:macro>

    <xacro:wheel_joint pos_x="left" pos_y="front" axis="1"/>
    <xacro:wheel_joint pos_x="right" pos_y="front" axis="-1"/>

</robot>